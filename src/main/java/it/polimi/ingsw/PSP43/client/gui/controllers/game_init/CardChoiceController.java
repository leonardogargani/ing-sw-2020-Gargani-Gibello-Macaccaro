package it.polimi.ingsw.PSP43.client.gui.controllers.game_init;

import it.polimi.ingsw.PSP43.client.ClientBG;
import it.polimi.ingsw.PSP43.client.gui.GuiStarter;
import it.polimi.ingsw.PSP43.client.networkMessages.ChosenCardResponse;
import it.polimi.ingsw.PSP43.server.controllers.AbstractGodCard;
import it.polimi.ingsw.PSP43.server.networkMessages.CardRequest;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;
import java.io.IOException;
import java.util.List;


public class CardChoiceController {

    @FXML private Label leftLabel;
    @FXML private Label bottomLabel;
    @FXML private ImageView leftArrowImage;
    @FXML private ImageView rightArrowImage;
    @FXML private ImageView cardImage;
    @FXML private ImageView confirmImage;

    private List<AbstractGodCard> availableCards;

    private static ClientBG clientBG;

    private int currentCardIndex = 0;


    /**
     * Method called as soon as the controlled fxml file gets loaded, here used to set css ids and classes.
     */
    @FXML
    private void initialize() {
        leftArrowImage.getStyleClass().add("arrow");
        rightArrowImage.getStyleClass().add("arrow");
        confirmImage.setId("confirm-image");
    }


    /**
     * Method that displays the information about the first card (the only one visible) and dispatches the
     * request message extracting its filed. It is called by GuiGraphicHandler and it's the first method to
     * be executed (apart from initialize()) inside this controller.
     * @param request request message sent by the server
     */
    public void customInit(CardRequest request) {
        setAvailableCards(request.getCards());
        displayCard(availableCards.get(0));
    }


    /**
     * Method that sets the ClientBG attribute of the controller, it will be invoked inside
     * the GuiGraphicHandler constructor so that the controller will have already the attribute set
     * once it will be utilized.
     * @param clientBG clientBG of the current client
     */
    public static void setClientBG(ClientBG clientBG) {
        CardChoiceController.clientBG = clientBG;
    }


    /**
     * Method that sets the attribute of the controller containing the list of all the available cards.
     * @param availableCards list of all the available cards
     */
    private void setAvailableCards(List<AbstractGodCard> availableCards) {
        this.availableCards = availableCards;
    }


    /**
     * Method that, given a card, displays its name, description, power and image on the scene.
     * @param card card to be displayed on the scene
     */
    private void displayCard(AbstractGodCard card) {

        bottomLabel.setText(card.getGodName().toUpperCase() + "\n" + card.getDescription());
        leftLabel.setText(card.getPower());

        String filepath = "/images/gods/" + card.getGodName() + "_1.png";
        cardImage.setImage(new Image(getClass().getResource(filepath).toExternalForm()));

    }


    /**
     * Method that handles a mouse event performed on the image to show the next card, checking
     * if the currently displayed one is the last card or not.
     */
    @FXML
    private void handleRightArrowImage() {
        // if the displayed card is the last one do nothing, else display the next one
        if ((currentCardIndex + 1) < availableCards.size()) {
            currentCardIndex++;
            displayCard(availableCards.get(currentCardIndex));
        }
    }


    /**
     * Method that handles a mouse event performed on the image to show the previous card, checking
     * if the currently displayed one is the first card or not.
     */
    @FXML
    private void handleLeftArrowImage() {
        // if the displayed card is the first one do nothing, else display the previous one
        if (currentCardIndex > 0) {
            currentCardIndex--;
            displayCard(availableCards.get(currentCardIndex));
        }
    }


    /**
     * Method that handles a mouse event performed on the image to confirm that the current card
     * will be one of the chosen ones for this game session.
     */
    @FXML
    private void handleConfirmImage() {

        AbstractGodCard currentCard = availableCards.get(currentCardIndex);

        ChosenCardResponse response = new ChosenCardResponse(currentCard);
        clientBG.sendMessage(response);

        // set a generic wait scene that will be overridden as soon as possible by a custom wait scene
        // generated by the reception of a StartGameMessage
        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("/FXML/miscellaneous/wait.fxml"));
        try {
            Stage stage = GuiStarter.getPrimaryStage();
            Scene scene = new Scene(loader.load());
            WaitController controller = loader.getController();
            // here the label set as empty defines the wait scene as a generic one
            controller.setLabelText("");
            scene.getStylesheets().add(getClass().getResource("/CSS/game_init/style.css").toExternalForm());
            stage.setScene(scene);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

}
